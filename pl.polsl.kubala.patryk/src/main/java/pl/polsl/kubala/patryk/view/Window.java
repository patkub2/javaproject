/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pl.polsl.kubala.patryk.view;

import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Class that is responsible for displaying the GUI
 *
 *
 * @author Patryk Kubala
 * @version 1.1
 */
public class Window extends javax.swing.JFrame {

    /**
     * Window initializator running a function that starts all of its components
     */
    public Window() {
        initComponents();

        decryptRadio.setSelected(rootPaneCheckingEnabled);
    }

    /**
     * Waiter object used for correct synchronization between
     * {@link pl.polsl.kubala.patryk.view.Window} and
     * {@link pl.polsl.kubala.patryk.controller.Controller}
     */
    final static Object waiter = new Object();

    /**
     * Second waiter object used for correct synchronization between
     * {@link pl.polsl.kubala.patryk.view.Window} and
     * {@link pl.polsl.kubala.patryk.controller.Controller} after running
     * program
     */
    final static Object waiterEnd = new Object();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        textInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        seedInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        encryptRadio = new javax.swing.JRadioButton();
        decryptRadio = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        textOutput.setEditable(false);
        textOutput.setColumns(20);
        textOutput.setRows(5);
        jScrollPane1.setViewportView(textOutput);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Homophonic cipher");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Seed");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Input text");

        buttonGroup1.add(encryptRadio);
        encryptRadio.setText("Encrypt");

        buttonGroup1.add(decryptRadio);
        decryptRadio.setText("Decrypt");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(encryptRadio)
                        .addComponent(decryptRadio))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(seedInput)
                        .addComponent(jLabel3)
                        .addComponent(textInput)))
                .addGap(87, 87, 87))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(submit)
                        .addGap(111, 111, 111)))
                .addGap(54, 54, 54))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seedInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(decryptRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encryptRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submit)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        seedInput.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane2.addTab("Cypher", jPanel1);

        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Text", "Seed", "Operation", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(historyTable);
        if (historyTable.getColumnModel().getColumnCount() > 0) {
            historyTable.getColumnModel().getColumn(0).setResizable(false);
            historyTable.getColumnModel().getColumn(1).setResizable(false);
            historyTable.getColumnModel().getColumn(2).setResizable(false);
            historyTable.getColumnModel().getColumn(3).setResizable(false);
            historyTable.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 5, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane2.addTab("History", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * Listener function for the button, checking if input is not empty, sending
     * signal to controller and adding a row to the history table
     *
     * @param evt action event signal triggered by a press of the button
     */

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        if (seedInput.getText().isEmpty() || !isNumeric(seedInput.getText())) {
            JOptionPane.showMessageDialog(rootPane,
                    "Please provide a number as a seed",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else if (textInput.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane,
                    "Please provide a text to perform an operation on",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {

            synchronized (waiterEnd) {
                waiterEnd.notifyAll();
            }
            waitForWaiter();
            fillTable();
        }

    }//GEN-LAST:event_submitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton decryptRadio;
    private javax.swing.JRadioButton encryptRadio;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    public javax.swing.JTextField seedInput;
    private static final javax.swing.JButton submit = new javax.swing.JButton();
    private javax.swing.JTextField textInput;
    private javax.swing.JTextArea textOutput;
    // End of variables declaration//GEN-END:variables

    /**
     * Function for checking if string has only numbers inside
     *
     * @param str input string with we want to check
     * @return returns true if there are only numbers else false
     */
    public static boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * Function with prevents while loop from running so the user can input data
     * inside fields usses a waiter wor stoping the program
     */
    public void buttonWaitForClicked() {
        synchronized (waiterEnd) {
            try {
                waiterEnd.wait();
            } catch (InterruptedException ignored) {
            }
        }
    }

    /**
     * Function with prevents while loop from running so the user can input data
     * inside fields usses a waiter wor stoping the program
     */
    public void waitForWaiter() {
        synchronized (waiter) {
            try {
                waiter.wait();
            } catch (InterruptedException ignored) {

            }
        }
    }

    /**
     * Function that notifys waiter after stoping the program
     */
    public void notifyWaiter() {
        synchronized (waiter) {
            waiter.notify();
        }
    }

    /**
     * Getter function for getting data from seed field
     *
     * @return data from seed field
     */
    public int getKeySeed() {

        return Integer.parseInt(seedInput.getText());
    }

    /**
     * Function for setting fields from cmd after running program
     *
     * @param seed value to be placed in seed field
     * @param text value to be placed in text field
     */
    public void setVieldsFromCmd(int seed, String text) {

        seedInput.setText(String.valueOf(seed));
        textInput.setText(text);
    }

    /**
     * Fuction for checking whith of the two radio buttons is selected
     *
     * @return number 0 for enryption 1 for decryption
     */
    public int getChoice() {
        int choiceNumber = 0;

        do {
            if (encryptRadio.isSelected()) {
                choiceNumber = 0;
            } else if (decryptRadio.isSelected()) {
                choiceNumber = 1;
            }
        } while (choiceNumber < 0 || choiceNumber > 1);
        return choiceNumber;
    }

    /**
     * Getter function for getting data from text field
     *
     * @return data from text field
     */
    public String getText() {
        return textInput.getText();
    }

    /**
     * Function that takes value and puts it into output field
     *
     * @param arg String whith is put into textOutput field
     */
    public void printToTextOutput(String arg) {
        textOutput.setText(arg);
    }

    /**
     * Function for printing error messages to screen in form of JOptionPane
     *
     * @param e Exeption to be thrown
     */
    public void printErrorMsg(Exception e) {
        JOptionPane.showMessageDialog(null,
                e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Funtion for returning string value for history data table
     *
     * @return string from radio buttons select
     */
    public String checkSelection() {
        if (encryptRadio.isSelected()) {
            return "Encrypt";
        } else {
            return "Decrypt";
        }
    }

    /**
     * Checks if the srting is empty
     *
     * @param arg string to be checked if empty
     * @return ERROR if empty else string value
     */
    public String checkIfPassed(String arg) {
        if (arg.isEmpty()) {
            return "ERROR";
        } else {
            return arg;
        }
    }

    /**
     * Function used to add a row in the history table
     */
    private void fillTable() {
        DefaultTableModel tblModel = (DefaultTableModel) historyTable.getModel();
        tblModel.addRow((new Object[]{java.util.Calendar.getInstance().getTime(), textInput.getText(), seedInput.getText(), checkSelection(), checkIfPassed(textOutput.getText())}));
    }

    /**
     * Function for cleaning output field
     */
    public void cleanFields() {
        textOutput.setText("");
    }

}
