/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pl.polsl.kubala.patryk.view;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author patry
 */
public class Window extends javax.swing.JFrame {

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        
        decryptRadio.setSelected(rootPaneCheckingEnabled);
    }
    private JFrame frame;
    final static Object waiter = new Object();
    final static Object supmen = new Object();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        textInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        seedInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        encryptRadio = new javax.swing.JRadioButton();
        decryptRadio = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        textInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textInputKeyTyped(evt);
            }
        });

        textOutput.setEditable(false);
        textOutput.setColumns(20);
        textOutput.setRows(5);
        textOutput.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                textOutputAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(textOutput);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Homophonic cipher");

        seedInput.setText("123");
        seedInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seedInputActionPerformed(evt);
            }
        });
        seedInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seedInputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                seedInputKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Seed");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Input text");

        buttonGroup1.add(encryptRadio);
        encryptRadio.setText("Encrypt");

        buttonGroup1.add(decryptRadio);
        decryptRadio.setText("Decrypt");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(encryptRadio)
                        .addComponent(decryptRadio))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(seedInput)
                        .addComponent(jLabel3)
                        .addComponent(textInput)))
                .addGap(87, 87, 87))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(submit)
                        .addGap(111, 111, 111)))
                .addGap(54, 54, 54))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seedInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(decryptRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encryptRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submit)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        seedInput.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane2.addTab("Cypher", jPanel1);

        historyList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(historyList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("History", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seedInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seedInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seedInputActionPerformed

    private void textOutputAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_textOutputAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_textOutputAncestorAdded

    private void textInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textInputKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_textInputKeyTyped

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        System.out.println("test1");
         if(seedInput.getText().isEmpty() || !isNumeric(seedInput.getText()))
        {
            JOptionPane.showMessageDialog(rootPane,
                    "Please provide a number as a seed",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        else if(textInput.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane,
                    "Please provide a text to perform an operation on",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            
            synchronized (supmen) {
                
                supmen.notifyAll();
                System.out.println("waiter.notify()");
           
            }
            waitForWaiter();
          //  fillTable();
        }
        
    }//GEN-LAST:event_submitActionPerformed

    private void seedInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seedInputKeyTyped
        // TODO add your handling code here:
        //seed =  Integer.parseInt(seedInput.getText());
               
               // System.out.println(g);
                
    }//GEN-LAST:event_seedInputKeyTyped

    private void seedInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seedInputKeyReleased
        // TODO add your handling code here:
        
          

        
    }//GEN-LAST:event_seedInputKeyReleased



     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton decryptRadio;
    private javax.swing.JRadioButton encryptRadio;
    private javax.swing.JList<String> historyList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane2;
    public javax.swing.JTextField seedInput;
    private static final javax.swing.JButton submit = new javax.swing.JButton();
    private javax.swing.JTextField textInput;
    private javax.swing.JTextArea textOutput;
    // End of variables declaration//GEN-END:variables


   public static boolean isNumeric(String str) { 
  try {  
    Double.parseDouble(str);  
    return true;
  } catch(NumberFormatException e){  
    return false;  
  }  
}
    
         public void buttonWaitForClicked(){
             //System.out.println("test3");
        synchronized (supmen)
        {
            try
            {
                System.out.println("supmen wait");
                supmen.wait();
                System.out.println("supmen start");
            }
            catch (InterruptedException ignored)
            {

            }
        }
        
    }
    
          public void waitForWaiter()
    {
        synchronized (waiter)
        {
            try
            {
                waiter.wait();
            }
            catch (InterruptedException ignored)
            {

            }
        }
    }
     /**
     * Notify waiter.
     */
    public void notifyWaiter()
    {
        synchronized (waiter)
        {
            waiter.notify();
        }
    }
    
    
  

    
   
    public int getKeySeed()
    {
      
        
    return  Integer.parseInt(seedInput.getText());
    }
    
    public int getChoice()
    {
        int choiceNumber =0;
        
       
        do
        {
            if( encryptRadio.isSelected()){
            choiceNumber = 0;
            System.out.println("Selected encrypt");
        }else
        if( decryptRadio.isSelected()){
            choiceNumber = 1;
            System.out.println("Selected decrypt");
        }
        }
        while(choiceNumber<0||choiceNumber>1);
        return choiceNumber;
    }
    
    public String toDecode()
    { 
        return textInput.getText();
    }
    
     public String toEncode()
    {
       
        return textInput.getText();
    }

    
    public void printToTextOutput(String arg)
    { 
        textOutput.setText(arg);
    }
    
    

    
    /**
     * @param args the command line arguments
     */
    
     public void printErrorMsg(Exception e)
    {
        JOptionPane.showMessageDialog(null,
                e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }
    
     
     public void cleanFields(Exception e)
    {
        textInput.setText("");
        seedInput.setText("");
    }
     
  









}
